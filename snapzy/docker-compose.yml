version: "3.9"

x-env: &default-env
  env_file:
    - ./.env

services:
  postgres:
    image: ankane/pgvector:pg16
    container_name: snapzy-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/postgres/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10

  cassandra:
    image: cassandra:4.1
    container_name: snapzy-cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=SnapzyCluster
      - CASSANDRA_NUM_TOKENS=128
    ports:
      - "9042:9042"
    volumes:
      - cassdata:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'describe cluster' || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 15

  redis:
    image: redis:7.2
    container_name: snapzy-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  opensearch:
    image: opensearchproject/opensearch:2.14.0
    container_name: snapzy-opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - bootstrap.memory_lock=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - osdata:/usr/share/opensearch/data

  minio:
    image: minio/minio:RELEASE.2024-07-10T18-41-49Z
    container_name: snapzy-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  create-bucket:
    image: minio/mc:RELEASE.2024-07-10T22-16-00Z
    container_name: snapzy-minio-setup
    depends_on:
      - minio
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "mc alias set local http://minio:9000 ${S3_ACCESS_KEY} ${S3_SECRET_KEY} &&
      mc mb -p local/${S3_BUCKET_MEDIA} || true &&
      mc anonymous set download local/${S3_BUCKET_MEDIA} || true"

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: snapzy-api
    <<: *default-env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      opensearch:
        condition: service_started
    ports:
      - "8080:8080"

  ai:
    build:
      context: ./services/ai
      dockerfile: Dockerfile
    container_name: snapzy-ai
    <<: *default-env
    ports:
      - "8082:8082"

  realtime:
    build:
      context: ./services/realtime
      dockerfile: Dockerfile
    container_name: snapzy-realtime
    <<: *default-env
    depends_on:
      redis:
        condition: service_started
      cassandra:
        condition: service_healthy
    ports:
      - "8083:8083"

  media:
    build:
      context: ./services/media
      dockerfile: Dockerfile
    container_name: snapzy-media
    <<: *default-env
    depends_on:
      minio:
        condition: service_started
    ports:
      - "8084:8084"

  web:
    build:
      context: ./services/web
      dockerfile: Dockerfile
    container_name: snapzy-web
    <<: *default-env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_GRAPHQL_URL=${NEXT_PUBLIC_GRAPHQL_URL}
      - NEXT_PUBLIC_REALTIME_WS=${NEXT_PUBLIC_REALTIME_WS}
      - NEXT_PUBLIC_S3_PUBLIC_URL=${NEXT_PUBLIC_S3_PUBLIC_URL}
    depends_on:
      - api
    ports:
      - "3000:3000"

  # Observability (optional via profiles)
  otel-collector:
    image: otel/opentelemetry-collector:0.103.1
    container_name: snapzy-otel-collector
    profiles: [observability]
    volumes:
      - ./infra/observability/otel-collector-config.yaml:/etc/otelcol/config.yaml
    command: ["--config", "/etc/otelcol/config.yaml"]
    ports:
      - "4317:4317"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: snapzy-prometheus
    profiles: [observability]
    volumes:
      - ./infra/observability/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.0
    container_name: snapzy-grafana
    profiles: [observability]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./infra/observability/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"

  loki:
    image: grafana/loki:2.9.8
    container_name: snapzy-loki
    profiles: [observability]
    ports:
      - "3100:3100"
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./infra/observability/loki-config.yaml:/etc/loki/local-config.yaml

volumes:
  pgdata:
  cassdata:
  redisdata:
  osdata:
  miniodata: